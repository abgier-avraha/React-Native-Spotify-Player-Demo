diff --git a/node_modules/react-native-reanimated/src/reanimated2/Colors.ts b/node_modules/react-native-reanimated/src/reanimated2/Colors.ts
old mode 100644
new mode 100755
index 66e5c13..86217f5
--- a/node_modules/react-native-reanimated/src/reanimated2/Colors.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/Colors.ts
@@ -694,11 +694,11 @@ const getInterpolateCacheRGBA = (
   colors: readonly (string | number)[]
 ): InterpolateCacheRGBA => {
   'worklet';
-  const hash = colors.join('');
-  const cache = interpolateCacheRGBA[hash];
-  if (cache !== undefined) {
-    return cache;
-  }
+  // const hash = colors.join('');
+  // const cache = interpolateCacheRGBA[hash];
+  // if (cache !== undefined) {
+  //   return cache;
+  // }
 
   const r = [];
   const g = [];
@@ -715,15 +715,16 @@ const getInterpolateCacheRGBA = (
       a.push(opacity(proocessedColor));
     }
   }
-  const newCache = { r, g, b, a };
-  const overrideHash = hashOrderRGBA[curentHashIndexRGBA];
-  if (overrideHash) {
-    delete interpolateCacheRGBA[overrideHash];
-  }
-  interpolateCacheRGBA[hash] = newCache;
-  hashOrderRGBA[curentHashIndexRGBA] = hash;
-  curentHashIndexRGBA = (curentHashIndexRGBA + 1) % BUFFER_SIZE;
-  return newCache;
+  // const newCache = { r, g, b, a };
+  // const overrideHash = hashOrderRGBA[curentHashIndexRGBA];
+  // if (overrideHash) {
+  //   delete interpolateCacheRGBA[overrideHash];
+  // }
+  // interpolateCacheRGBA[hash] = newCache;
+  // hashOrderRGBA[curentHashIndexRGBA] = hash;
+  // curentHashIndexRGBA = (curentHashIndexRGBA + 1) % BUFFER_SIZE;
+  // return newCache;
+  return { r, g, b, a };
 };
 
 interface InterpolateCacheHSV {
